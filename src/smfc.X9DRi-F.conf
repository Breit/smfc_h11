#
#   smfc.conf
#   smfc service configuration parameters
#

[Paths]
# Path for ipmitool (str, default=/usr/bin/ipmitool)
#ipmitool_path=/usr/bin/ipmitool
ipmitool_path=/usr/local/bin/ipmitool
# Path to smartctl
#smartctl_path=/usr/sbin/smartctl
smartctl_path=/usr/local/sbin/smartctl

[Ipmi]
# Delay time after changing IPMI fan mode (int, seconds, default=10)
fan_mode_delay=10
# Delay time after changing IPMI fan level (int, seconds, default=2)
fan_level_delay=2
# CPU and HD zones are swapped (bool, default=0).
# Default zone for CPU is FAN#, where # is a number
# Default zone for HD is FAN#, where # is a letter
swapped_zones=1
# Enable this for some Supermicro X9 boards like the X9DRi-F
# They use a different IPMI command to set fan speeds
impi_alternate_mode=1

[CPU zone]
# Fan controller enabled (bool, default=0)
enabled=1
# Calculation method for CPU temperatures (int, [0-minimum, 1-average, 2-maximum], default=2)
temp_calc=2
# Discrete steps in mapping of temperatures to fan level (int, default=6)
steps=6
# Threshold in temperature change before the fan controller reacts (float [0.0..1.0], default=0.05)
sensitivity=0.05
# Polling time interval for reading temperature (int, sec, default=2)
polling=2
# Minimum IPMI sensor temperature override (float, C, default=None)
min_temp=30.0
# Maximum IPMI sensor temperature override (float, C, default=None)
max_temp=80.0
# Minimum CPU fan level (int, %, default=35)
min_level=20
# Maximum CPU fan level (int, %, default=100)
max_level=100
# Relative target temperature (float, [0.0..1.0], default=0.3)
# Below this threshold, minimum fan speed is applied
# rel_target=0.0 means min_temp; rel_target=1.0 means max_temp
rel_target=0.3
# List of strings to specify IPMI sensors for this controller
# Entries can be partial, e.g. 'CPU' will match 'CPU0' and 'CPU1'
sensor_spec=CPU
            VRM

[HD zone]
# Fan controller enabled (bool, default=0)
enabled=1
# Calculation of HD temperatures (int, [0-minimum, 1-average, 2-maximum], default=2)
temp_calc=2
# Discrete steps in mapping of temperatures to fan level (int, default=4)
steps=9
# Threshold in temperature change before the fan controller reacts (float [0.0..1.0], default=0.02)
sensitivity=0.02
# Polling interval for reading temperature (int, sec, default=10)
polling=10
# Try to parse temperature limits from IPMI/SMART data (bool, default=0) [EXPERIMENTAL]
parse_limits=0
# Minimum IPMI sensor temperature override (float, C, default=None)
min_temp=30.0
# Maximum IPMI sensor temperature override (float, C, default=None)
max_temp=80.0
# Minimum HDD temperature (float, C, default=10.0)
min_temp_hdd=30.0
# Maximum HDD temperature (float, C, default=50.0)
max_temp_hdd=45.0
# Minimum SSD temperature (float, C, default=30.0)
min_temp_ssd=30.0
# Maximum SSD temperature (float, C, default=70.0)
max_temp_ssd=60.0
# Minimum HD fan level (int, %, default=35)
min_level=20
# Maximum HD fan level (int, %, default=100)
max_level=100
# Relative target temperature (float, [0.0..1.0], default=0.3)
# Below this threshold, minimum fan speed is applied
# rel_target=0.0 means min_temp; rel_target=1.0 means max_temp
rel_target=0.3
# List of strings to specify IPMI sensors for this controller
# Entries can be partial, e.g. 'NVMe' will match 'M2NVMeSSD Temp1'
# This list can also be empty, as all disk drives found on the system are also used
# for this controller.
sensor_spec=DIMM
            PCH
            Peripheral
            System
            # NVMe
